def rf_model(train, horizon, model_params):
  
    params = {k: v for k, v in model_params.items() if v is not None}
    
    lag, out_f   = params["lag"], params["out"]
    n_estimators = [int(x) for x in np.linspace(start = params["n_est_start"], stop = params["n_est_stop"], num = 10)]
    max_features = ['auto', 'sqrt']
    max_depth    = [int(x) for x in np.linspace(params["max_dep_start"], params["max_dep_stop"], num = 11)]
    max_depth.append(None)
    
    min_samples_split = [2, 5, 10]
    min_samples_leaf  = [1, 2, 4]
    bootstrap         = [True, False]
    random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf,
               'bootstrap': bootstrap}
    
    
    data_con_x, data_con_y = ts_labelled(list(train), lag, out_f)
  
    model = RandomForestRegressor()
    rf_random = RandomizedSearchCV(estimator = model, param_distributions = random_grid, n_iter = 500, cv = 3, verbose = 0, random_state=42, n_jobs = -1)
    
    rf_random.fit(data_con_x, data_con_y)
    
    best_model = rf_random.best_estimator_
    train_fitted=best_model.predict(data_con_x)
    forecasts=[]
    
    for i in range(horizon):
        
        row = np.array(train[-lag:]).flatten()
        yhat = best_model.predict(np.asarray([row]))
        forecasts.append(yhat[0])
        train = np.append(train,[yhat])
        
    true_fitted = [None]*lag

    for i in range(len(train_fitted)):
        
        true_fitted.append(train_fitted[i])

    final_forecasts=[]

    for i in forecasts:
        if i<0:
            final_forecasts.append(0)
        else:
            final_forecasts.append(i)

    return (best_model, final_forecasts, true_fitted)
